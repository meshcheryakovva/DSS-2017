function V_res = fis_V(inVector, inCodes)
  // аргументы: входной вектор числовых значений и массив строк-имен переменных
    
  f_V=newfls("m"); // тип Мамдани
  f_V.name="fisV";
  f_V.TNorm="min"; // and
  f_V.SNorm="max"; // or
  f_V.Comp="one";  // not
  f_V.defuzzMethod="centroide"; // центр тяжести
  f_V.ImpMethod = 'min'
  f_V.AggMethod = 'max'

  // переменные и функции принадлежности
  for i=1:11
    f_V = addvar(f_V, "input", inCodes(i), [-1 1]);
    f_V = addmf(f_V,"input",i,"low","trimf",[-1.1 -1.0 0.0]);  
    f_V = addmf(f_V,"input",i,"mid","trimf", [-1.0 0.0 1.0]);  
    f_V = addmf(f_V,"input",i,"high","trimf", [0.0 1.0 1.1]);  
  end

  f_V = addvar(f_V, "output", "V", [-1 1]);
  f_V = addmf(f_V,"output", 1, "low","trimf",[-1.1 -1.0 0.0]);  
  f_V = addmf(f_V,"output", 1, "mid","trimf", [-1.0 0.0 1.0]);  
  f_V = addmf(f_V,"output", 1, "high","trimf", [0.0 1.0 1.1]);  

  // матрица правил из FisPro
  rulesFISProV = [ 3 , 3 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 3 , 0 ,   3;
2 , 3 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 3 , 0 ,   3;
3 , 2 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 3 , 0 ,   3;
3 , 3 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 3 , 0 ,   3;
3 , 3 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   3;
3 , 3 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   3;
2 , 3 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   3;
2 , 2 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 3 , 0 ,   3;
3 , 2 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   3;
2 , 3 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 3 , 0 ,   3;
2 , 2 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   2;
1 , 2 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   2;
2 , 1 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   2;
2 , 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   2;
2 , 2 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,   2;
1 , 1 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   1;
2 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   1;
2 , 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,   1;
1 , 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   1;
2 , 1 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,   1;
2 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,   1;
1 , 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,   1;
1 , 1 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,   1;
1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , 0 ,   1;
1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,   1;
0 , 0 , 3 , 0 , 0 , 3 , 0 , 0 , 3 , 0 , 3 ,   3;
0 , 0 , 2 , 0 , 0 , 3 , 0 , 0 , 3 , 0 , 3 ,   3;
0 , 0 , 3 , 0 , 0 , 2 , 0 , 0 , 3 , 0 , 3 ,   3;
0 , 0 , 3 , 0 , 0 , 3 , 0 , 0 , 2 , 0 , 3 ,   3;
0 , 0 , 3 , 0 , 0 , 3 , 0 , 0 , 3 , 0 , 2 ,   3;
0 , 0 , 3 , 0 , 0 , 3 , 0 , 0 , 2 , 0 , 2 ,   3;
0 , 0 , 2 , 0 , 0 , 3 , 0 , 0 , 3 , 0 , 2 ,   3;
0 , 0 , 2 , 0 , 0 , 2 , 0 , 0 , 3 , 0 , 3 ,   3;
0 , 0 , 3 , 0 , 0 , 2 , 0 , 0 , 3 , 0 , 2 ,   3;
0 , 0 , 2 , 0 , 0 , 3 , 0 , 0 , 2 , 0 , 3 ,   3;
0 , 0 , 2 , 0 , 0 , 2 , 0 , 0 , 2 , 0 , 2 ,   2;
0 , 0 , 1 , 0 , 0 , 2 , 0 , 0 , 2 , 0 , 2 ,   2;
0 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 2 , 0 , 2 ,   2;
0 , 0 , 2 , 0 , 0 , 2 , 0 , 0 , 1 , 0 , 2 ,   2;
0 , 0 , 2 , 0 , 0 , 2 , 0 , 0 , 2 , 0 , 1 ,   2;
0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 2 , 0 , 2 ,   1;
0 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 2 ,   1;
0 , 0 , 2 , 0 , 0 , 2 , 0 , 0 , 1 , 0 , 1 ,   1;
0 , 0 , 1 , 0 , 0 , 2 , 0 , 0 , 1 , 0 , 2 ,   1;
0 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 2 , 0 , 1 ,   1;
0 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 ,   1;
0 , 0 , 1 , 0 , 0 , 2 , 0 , 0 , 1 , 0 , 1 ,   1;
0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 2 , 0 , 1 ,   1;
0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 2 ,   1;
0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 ,   1;
0 , 3 , 0 , 0 , 3 , 0 , 3 , 3 , 0 , 0 , 0 ,   3;
0 , 2 , 0 , 0 , 3 , 0 , 3 , 3 , 0 , 0 , 0 ,   3;
0 , 3 , 0 , 0 , 2 , 0 , 3 , 3 , 0 , 0 , 0 ,   3;
0 , 3 , 0 , 0 , 3 , 0 , 2 , 3 , 0 , 0 , 0 ,   3;
0 , 3 , 0 , 0 , 3 , 0 , 3 , 2 , 0 , 0 , 0 ,   3;
0 , 3 , 0 , 0 , 3 , 0 , 2 , 2 , 0 , 0 , 0 ,   3;
0 , 2 , 0 , 0 , 3 , 0 , 3 , 2 , 0 , 0 , 0 ,   3;
0 , 2 , 0 , 0 , 2 , 0 , 3 , 3 , 0 , 0 , 0 ,   3;
0 , 3 , 0 , 0 , 2 , 0 , 3 , 2 , 0 , 0 , 0 ,   3;
0 , 2 , 0 , 0 , 3 , 0 , 2 , 3 , 0 , 0 , 0 ,   3;
0 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 0 , 0 , 0 ,   2;
0 , 1 , 0 , 0 , 2 , 0 , 2 , 2 , 0 , 0 , 0 ,   1,
0 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 0 , 0 , 0 ,   1;
0 , 2 , 0 , 0 , 2 , 0 , 1 , 2 , 0 , 0 , 0 ,   2;
0 , 2 , 0 , 0 , 2 , 0 , 2 , 1 , 0 , 0 , 0 ,   2;
0 , 1 , 0 , 0 , 1 , 0 , 2 , 2 , 0 , 0 , 0 ,   1;
0 , 2 , 0 , 0 , 1 , 0 , 1 , 2 , 0 , 0 , 0 ,   1;
0 , 2 , 0 , 0 , 2 , 0 , 1 , 1 , 0 , 0 , 0 ,   1;
0 , 1 , 0 , 0 , 2 , 0 , 1 , 2 , 0 , 0 , 0 ,   1;
0 , 2 , 0 , 0 , 1 , 0 , 2 , 1 , 0 , 0 , 0 ,   1;
0 , 2 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 ,   1;
0 , 1 , 0 , 0 , 2 , 0 , 1 , 1 , 0 , 0 , 0 ,   1;
0 , 1 , 0 , 0 , 1 , 0 , 2 , 1 , 0 , 0 , 0 ,   1;
0 , 1 , 0 , 0 , 1 , 0 , 1 , 2 , 0 , 0 , 0 ,   1;
0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 ,   1];
  
  // добавить столбцы для конъюнкции и весов правил
  len = size(rulesFISProV,1);
  rulesV = cat(2, rulesFISProV, ones(len,2));
  
  f_V = addrule(f_V, rulesV); // база правил
  
  
  editfls(f_V)
  V_res = evalfls(inVector, f_V); // вывод
  
endfunction
